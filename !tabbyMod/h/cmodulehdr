/*
 * Created by cmhg vsn 5.46 [28 Nov 2020]
 */

#ifndef __cmhg_cmodulehdr_h
#define __cmhg_cmodulehdr_h

#ifndef __kernel_h
#include "kernel.h"
#endif

#define CMHG_VERSION 546

#define Module_Title                     "TestCModule"
#define Module_Help                      "Test C Module"
#define Module_VersionString             "0.00"
#define Module_VersionNumber             0
#ifndef Module_Date
#define Module_Date                      "06 Feb 2022"
#endif


/*
 * Start code
 * ==========
 *
 * Entered in user-mode with argc and argv
 * set up as for any other application. Malloc
 * obtains storage from application workspace.
 */
int main(int argc, char *argv[]);


/*
 * Initialisation code
 * ===================
 *
 * Return NULL if your initialisation succeeds. Return the special value
 * defined below if your initialisation succeeds but you do not require
 * static data for this instantiation (including shared library static
 * data - you should assume that any shared library call might need to use
 * static data). Otherwise return a pointer to an error block.
 * cmd_tail points to the string of arguments with which the module is
 * invoked (may be "", and is control-terminated, not zero terminated).
 * podule_base is the 'R11' value established by module initialisation
 * which is the podule base address if the code has been invoked from a
 * podule, otherwise it is the number of other instantiations of the module.
 * pw is the 'R12' value established by module initialisation. You may
 * assume nothing about its value (in fact it points to some RMA space
 * claimed and used by the module veneers). All you may do is pass it back
 * for your module veneers via an intermediary such as SWI OS_CallEvery
 * (use _swix() to issue the SWI call).
 */
#define initialise_NO_STATIC_DATA ((_kernel_oserror *) -1)

_kernel_oserror *tm_initialise(const char *cmd_tail, int podule_base, void *pw);


/*
 * Service call handler
 * ====================
 *
 * Return values should be poked directly into r->r[n]; the right
 * value/register to use depends on the service number (see the relevant
 * RISC OS Programmer's Reference Manual section for details).
 * pw is the private word (the 'R12' value).
 */
void tm_service(int service_number, _kernel_swi_regs *r, void *pw);


/*
 * Command handler
 * ===============
 *
 * If cmd_no identifies a command, then arg_string gives the command tail
 * (which you may not overwrite), and argc is the number of parameters.
 * NB. arg_string is control terminated so it may not be a C string.
 * Return NULL if the command has been successfully handled; otherwise
 * return a pointer to an error block describing the failure (in this
 * case, the veneer code will set the 'V' bit).
 *
 * If cmd_no identifies a *Help entry, then arg_string denotes a buffer
 * that you can assemble your output into, and argc is the length of the
 * buffer, in bytes. cmd_handler must return NULL, an error pointer or
 * help_PRINT_BUFFER (if help_PRINT_BUFFER is returned, the zero-
 * terminated buffer will be printed).
 *
 * If cmd_no identifies a *Configure option, then arg_string may contain
 * one of the two special values arg_CONFIGURE_SYNTAX or arg_STATUS;
 * otherwise it points at the command tail, with leading spaces skipped.
 * If arg_string is set to arg_CONFIGURE_SYNTAX, the user has typed
 * *Configure with no parameter; simply print your syntax string. If
 * arg_string is set to arg_STATUS, print your current configured status.
 * Otherwise, the user has typed *Configure with one or more parameters
 * as described in the command tail. The parameter argc contains an
 * undefined value in all three cases. Return NULL, an error pointer, or
 * one of the four special values defined below.
 *
 * pw is the private word pointer ('R12') value passed into the entry
 * veneer
 */
#define help_PRINT_BUFFER         ((_kernel_oserror *) arg_string)
#define arg_CONFIGURE_SYNTAX      ((char *) 0)
#define arg_STATUS                ((char *) 1)
#define configure_BAD_OPTION      ((_kernel_oserror *) -1)
#define configure_NUMBER_NEEDED   ((_kernel_oserror *) 1)
#define configure_TOO_LARGE       ((_kernel_oserror *) 2)
#define configure_TOO_MANY_PARAMS ((_kernel_oserror *) 3)

#define CMD_tabbyCapture                0

_kernel_oserror *tm_cmd(const char *arg_string, int argc, int cmd_no, void *pw);


/*
 * SWI handler code
 * ================
 *
 * swi_offset contains the offset of the SWI into your SWI chunk.
 * r points to the registers passed to the SWI.
 *
 * Return NULL if the SWI is handled successfully; otherwise return
 * a pointer to an error block which describes the error.
 * The veneer code sets the 'V' bit if the returned value is non-NULL.
 * The special value error_BAD_SWI may be returned if you do not
 * implement a SWI; the veneer will arrange for the appropriate
 * standard internationalised error 'SWI value out of range for
 * module TestCModule' to be returned.
 * The handler may update any of its input registers (R0-R9).
 * pw is the private word pointer ('R12') value passed into the
 * SWI handler entry veneer.
 */
#define error_BAD_SWI ((_kernel_oserror *) -1)

_kernel_oserror *tm_swi(int swi_offset, _kernel_swi_regs *r, void *pw);

#endif
